            
public class Node implements Position {
	private int element;
    Node next;            //    Q2
	public Node (int d) {
		this.element = d;
	}	
	public int element() {
		return element;
	}
}        
        
        
        

public class SinglyLinkedList implements List {
	public SinglyLinkedList(int i) {
		
	}                         //1
	
	private Node first;
	private int size;            //2
	public Position first() {		//3
		return first; 
		}  
	public Position last() {
		if(isEmpty())
			return null;
		Node n = first;
		while(n.next != null){
			n = n.next;           
			}
		return n; 
	}	  
	public Position before(Position p) { 
		if(isEmpty() || p == first)
			return null;
		Node i = first;
		while(i.next != null && i.next != p){
			i = i.next;               //4
		}
		return i;
	}
	public Position after(Position p) {
		Node p1 = (Node) p; 
		return p1.next;
	}
	public Position insertBefore(Position p, int v) {
		if(p == first) 
		return insertFirst(v);
		Node n = new Node(v);         //5
		Node bp = (Node) before(p);
		n.next = (Node)p;
		bp.next = n;
		size = size + 1;
		return n;
		
	}
	public Position insertAfter(Position p, int v) {
	    Node n = new Node(v);
	    n.next = ((Node)p).next;
	    ((Node)p).next = n;
	    size = size + 1;
		return n;
	} 
	public Position insertFirst(int d) {
		Node n = new Node(d);
		n.next = first;
		first = n;
		size = size + 1;
		return n;
	}
	public Position insertLast(int d) {
		Node n= new Node(d);
		if (isEmpty())
			return insertFirst(d);
		else {
			//
			Node i = (Node) last();
			i.next = n;
			size = size + 1;
			return n;
		}
	}
	public int remove(Position p) {         //
		Node d = (Node)p ;
		if(p == first)
			first = ((Node)p).next;
		else {
			Node bp = (Node)before(p);
		    bp.next = ((Node)p).next; 
		}
		((Node)p).next = null;
		size = size - 1;
		return d.element();				
	}
	public int size() {
		return size;				
	}   
	public boolean isEmpty() {					
		return size == 0;
	}				
	public void print(){ 				
		if(isEmpty())
			return;				
		Node n = first;					
		System. out .print("[ ");					
		while(n != null){						
			if(n.next != null)							
				System. out .print(n.element() + " -> ");						
			else					
				System. out .print(n.element());
						
			n = n.next;   
						
		} 
					
		System. out .println(" ]");  } 
	}
